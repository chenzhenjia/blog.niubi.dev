<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>陈</title><link>https://blog.niubi.dev/</link><description>陈</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 13 Mar 2025 20:00:00 +0800</lastBuildDate><atom:link href="https://blog.niubi.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>utm加载qcow2镜像安装linux显示Display Output is Not Active</title><link>https://blog.niubi.dev/posts/2025/03/1/</link><pubDate>Thu, 13 Mar 2025 20:00:00 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/2025/03/1/</guid><description><![CDATA[<ol>
<li>点击创建一个虚拟机
</li>
<li>虚拟化点击其它
</li>
<li>启动设备选无
</li>
<li>设置cpu和内存</li>
<li>后面的直接继续就行了</li>
<li>打开虚拟机设置
</li>
<li>修改网络设置为桥接
</li>
<li>新建串行
</li>
<li>删除默认的驱动器
</li>
<li>导入qcow2镜像
</li>
<li>保存虚拟机设置
启动虚拟机就会弹出两个窗口，一个创建不能显示内容，但是另外一个是有linux终端，这样就可以操作Linux，下一个文章解决qcow2安装后扩容</li>
</ol>]]></description></item><item><title>安装了magisk的pixel4xl升级到安卓13</title><link>https://blog.niubi.dev/posts/%E5%AE%89%E8%A3%85%E4%BA%86magisk%E7%9A%84pixel4xl%E5%8D%87%E7%BA%A7%E5%88%B0%E5%AE%89%E5%8D%9313/</link><pubDate>Wed, 12 Oct 2022 14:25:00 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/%E5%AE%89%E8%A3%85%E4%BA%86magisk%E7%9A%84pixel4xl%E5%8D%87%E7%BA%A7%E5%88%B0%E5%AE%89%E5%8D%9313/</guid><description><![CDATA[<h2 id="原因">原因</h2>
<p>我的pxiel4xl在线升级安卓13的时候报升级出错，后来找了一下原因，是因为系统更新（OTA）更新的时候，会检测验证system分区是否完整，如果被修改，则会导致更新失败，所以在下载的时候直接提示安装失败。刷Magisk时修改了boot.img这个system分区的文件，所以刷Magisk后不能直接安装OTA更新。</p>
<h2 id="解决方法">解决方法</h2>
<h3 id="准备工作">准备工作</h3>
<ol>
<li>先关闭开发者设置中的系统自动更新
</li>
</ol>
<h3 id="先卸载magisk">先卸载magisk</h3>
<ol>
<li>打开Magisk</li>
<li>点击卸载Magisk</li>
<li>点击弹出窗口的还原原厂镜像
还原远程镜像会可能会提示 <code>stock backup does not exist</code> <code>原厂镜像备份不存在</code></li>
</ol>
<h3 id="解决原厂镜像不存在的问题">解决原厂镜像不存在的问题</h3>
<blockquote>
<p>如果还原成功不需要进行该操作</p></blockquote>
<ol>
<li>
<p>在设置里面打开关于手机-&gt;版本号</p>
<p></p>
<blockquote>
<p>我在这里的版本号就是 221005.002 ，你需要注意你的安装版本号</p></blockquote>
</li>
<li>
<p>下载对应的镜像</p>
<p><a href="https://developers.google.com/android/images#coral" target="_blank" rel="noopener noreffer ">下载网页</a></p>
<blockquote>
<p>找到你手机对应的版本号下载</p></blockquote>
</li>
<li>
<p>解压boot.img</p>
<p>在下载好的压缩包找到 image- 开头的压缩包</p>
<p>再从这个image-开头的压缩包里面提取boot.img</p>
</li>
<li>
<p>制作准备还原的boot.img</p>
<ol>
<li>在电脑上push boot.img到手机上</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">adb push boot.img /sdcard/boot.img</span></span></code></pre></div></div>
<ol start="2">
<li>进入adb shell</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">adb shell
</span></span><span class="line"><span class="cl">su</span></span></code></pre></div></div>
<ol start="3">
<li>分别执行一下命令</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">SHA1</span><span class="o">=</span><span class="k">$(</span>cat <span class="k">$(</span>magisk --path<span class="k">)</span>/.magisk/config <span class="p">|</span> grep SHA1 <span class="p">|</span> cut -d <span class="s1">&#39;=&#39;</span> -f 2<span class="k">)</span>
</span></span><span class="line"><span class="cl">gzip -9f /sdcard/boot.img
</span></span><span class="line"><span class="cl">mkdir /data/magisk_backup_<span class="si">${</span><span class="nv">SHA1</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">mv /sdcard/boot.img.gz /data/magisk_backup_<span class="si">${</span><span class="nv">SHA1</span><span class="si">}</span>/boot.img.gz
</span></span><span class="line"><span class="cl">chmod -R <span class="m">755</span> /data/magisk_backup_<span class="si">${</span><span class="nv">SHA1</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">chown -R root.root /data/magisk_backup_<span class="si">${</span><span class="nv">SHA1</span><span class="si">}</span></span></span></code></pre></div></div>
<p>上面的操作都成功了就可以了</p>]]></description></item><item><title>SpringBoot配置VueJs或者React的history路由</title><link>https://blog.niubi.dev/posts/springboot%E9%85%8D%E7%BD%AEvuejs%E6%88%96%E8%80%85react%E7%9A%84history%E8%B7%AF%E7%94%B1/</link><pubDate>Thu, 24 Oct 2019 10:24:53 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/springboot%E9%85%8D%E7%BD%AEvuejs%E6%88%96%E8%80%85react%E7%9A%84history%E8%B7%AF%E7%94%B1/</guid><description><![CDATA[<p>一般在配置前端的文件夹的时候都会指定一个路径，如果你想使用根路径我这种方法不支持根路径，请使用另外一种支持根路径的配置方法。</p>
<h2 id="配置">配置</h2>
<p>比如把前端放在 h5 路径下面</p>
<ol>
<li>
<p>把前端打包的文件放在resource/META-INF/h5 目录</p>
<p></p>
</li>
<li>
<p>修改Spring Boot WebMvc的配置</p>
</li>
</ol>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Configuration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">WebMvcConfiguration</span><span class="w"> </span><span class="kd">implements</span><span class="w"> </span><span class="n">WebMvcConfigurer</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">addResourceHandlers</span><span class="p">(</span><span class="n">ResourceHandlerRegistry</span><span class="w"> </span><span class="n">registry</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">registry</span><span class="p">.</span><span class="na">addResourceHandler</span><span class="p">(</span><span class="s">&#34;/h5/**&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="na">addResourceLocations</span><span class="p">(</span><span class="s">&#34;classpath:/META-INF/h5/&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">addViewControllers</span><span class="p">(</span><span class="n">ViewControllerRegistry</span><span class="w"> </span><span class="n">registry</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// 配置如果用户访问的是根目录直接重定向掉h5页面</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">registry</span><span class="p">.</span><span class="na">addRedirectViewController</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;h5&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// 配置用户如果访问h5路径但是没有带index.html 转发到 /h5/index.html 路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">registry</span><span class="p">.</span><span class="na">addViewController</span><span class="p">(</span><span class="s">&#34;/h5&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="na">setViewName</span><span class="p">(</span><span class="s">&#34;forward:/h5/index.html&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">registry</span><span class="p">.</span><span class="na">addViewController</span><span class="p">(</span><span class="s">&#34;/h5/&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="na">setViewName</span><span class="p">(</span><span class="s">&#34;forward:/h5/index.html&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// 一下是为了给前端 history路由的一些配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">registry</span><span class="p">.</span><span class="na">addViewController</span><span class="p">(</span><span class="s">&#34;/h5/{spring:\\w+}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="na">setViewName</span><span class="p">(</span><span class="s">&#34;forward:/h5/index.html&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">registry</span><span class="p">.</span><span class="na">addViewController</span><span class="p">(</span><span class="s">&#34;/h5/**/{spring:\\w+}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="na">setViewName</span><span class="p">(</span><span class="s">&#34;forward/h5/index.html&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">registry</span><span class="p">.</span><span class="na">addViewController</span><span class="p">(</span><span class="s">&#34;/h5/{spring:\\w+}/**{spring:?!(\\.js|\\.css)$}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="na">setViewName</span><span class="p">(</span><span class="s">&#34;forward:/h5/index.html&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span></span></span></code></pre></div></div>]]></description></item><item><title>在 centos 上搭建k3s 集群</title><link>https://blog.niubi.dev/posts/%E5%9C%A8centos%E4%B8%8A%E6%90%AD%E5%BB%BAk3s%E9%9B%86%E7%BE%A4/</link><pubDate>Sat, 24 Aug 2019 15:38:25 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/%E5%9C%A8centos%E4%B8%8A%E6%90%AD%E5%BB%BAk3s%E9%9B%86%E7%BE%A4/</guid><description><![CDATA[<h2 id="介绍-k3s">介绍 k3s</h2>
<p>k3s 是Rancher Labs（以下简称Rancher）宣布推出轻量级Kubernetes发行版K3s（已开源），这款产品专为在资源有限的环境中运行Kubernetes的研发和运维人员设计。Rancher此次发布的K3s项目，将满足在边缘计算环境中运行在x86、ARM64和ARMv7处理器上的小型、易于管理的Kubernetes集群日益增长的需求。</p>
<h2 id="开始安装">开始安装</h2>
<ol>
<li>
<p>安装 docker
<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener noreffer "> 官方文档 </a>
这里推荐使用官方的脚本一键安装</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL https://get.docker.com -o get-docker.sh
</span></span><span class="line"><span class="cl">sudo sh get-docker.sh</span></span></code></pre></div></div>
<blockquote>
<p>如果你想使用 k3s 默认的 contanerd 容器可以跳过，但是由于我对 contanerd 不熟悉所以我在这里使用的是 docker</p></blockquote>
</li>
<li>
<p>安装 k3s server</p>
<p>安装 k3s server 有几种方式，由于 k3s 的执行文件是是放在 github上的，但是在中国由于网速不好可能会导致下载不下来，所以可以先使用其它工具下载可执行文件然后上传到服务器上的  <code>/usr/local/bin</code> 目录下，然后执行 <code>chmod 0755 /usr/local/bin/k3s </code> 命令给与执行权限</p>
<p>直接下载安装:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sfL https://get.k3s.io <span class="p">|</span> <span class="nv">INSTALL_K3S_EXEC</span><span class="o">=</span><span class="s2">&#34;server --no-deploy traefik --docker&#34;</span> sh -s -</span></span></code></pre></div></div>
<p>自己下载安装:</p>]]></description></item><item><title>Golang在Windows上同时编译64位和32位可执行程序</title><link>https://blog.niubi.dev/posts/golang%E5%9C%A8windows%E4%B8%8A%E5%90%8C%E6%97%B6%E7%BC%96%E8%AF%9164%E4%BD%8D%E5%92%8C32%E4%BD%8D%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/</link><pubDate>Fri, 02 Nov 2018 18:38:39 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/golang%E5%9C%A8windows%E4%B8%8A%E5%90%8C%E6%97%B6%E7%BC%96%E8%AF%9164%E4%BD%8D%E5%92%8C32%E4%BD%8D%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/</guid><description><![CDATA[<h2 id="golang-在-windows-上同时编译64位和32位可执行程序">Golang 在 Windows 上同时编译64位和32位可执行程序</h2>
<p><em>需要在windows上同时编译需要64位的系统，32位只能编译32位的可执行程序。</em></p>
<ul>
<li>编译32位
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">GOOS</span><span class="o">=</span>windows <span class="nv">GOARCH</span><span class="o">=</span><span class="m">386</span> go build main.go</span></span></code></pre></div></div>
</li>
<li>编译64位
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">GOOS</span><span class="o">=</span>windows <span class="nv">GOARCH</span><span class="o">=</span>amd64 go build main.go</span></span></code></pre></div></div>
</li>
</ul>
<h3 id="遇到的问题">遇到的问题</h3>
<p>由于在项目中用到了<strong>sqlite</strong>所以在编译的时候报 <strong>exec: &ldquo;gcc&rdquo;: executable file not found in %PATH%</strong>，这是因为在windows上缺少 <em>gcc</em>,所以在windows 上需要安装 <em>MinGW</em>。</p>
<ul>
<li>
<p>下载 MinGW
<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/%20" target="_blank" rel="noopener noreffer ">进入下载页面</a></p>
<ul>
<li>
<p>下载 MinGW64，注意请选择 _x86_64-posix-seh
<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z" target="_blank" rel="noopener noreffer ">MinGW64 8.1.0 下载地址</a></p>]]></description></item><item><title>Spring MVC 自定义静态资源下载</title><link>https://blog.niubi.dev/posts/spring-mvc-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD/</link><pubDate>Tue, 04 Sep 2018 14:18:53 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/spring-mvc-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD/</guid><description><![CDATA[<p>在 Spring MVC 中上传文件后把文件保存在本地，但是数据库保存了一份路径，所有需要实现下载文件，网上的教程一般都是自己写一个Controller 去下载，但是我这里直接使用Spring MVC的 <code>ResourceHttpRequestHandler</code> 实现动态下载静态资源，只需一点点代码然后加一段配置就可以实现下载附件功能。</p>
<h2 id="第一步">第一步</h2>
<p>自定义一个Handler，并重写 <code>ResourceHttpRequestHandler</code> 的 <code>processPath</code> 方法。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">CustomResourceHttpRequestHandler</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">ResourceHttpRequestHandler</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">UploadRepository</span><span class="w"> </span><span class="n">uploadRepository</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="nf">CustomResourceHttpRequestHandler</span><span class="p">(</span><span class="n">UploadRepository</span><span class="w"> </span><span class="n">uploadRepository</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">this</span><span class="p">.</span><span class="na">uploadRepository</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uploadRepository</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 重写该方法实现动态获取文件路径，而不是直接获取本地文件的路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">protected</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">processPath</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">path</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Upload</span><span class="o">&gt;</span><span class="w"> </span><span class="n">uploadOption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uploadRepository</span><span class="p">.</span><span class="na">findById</span><span class="p">(</span><span class="n">path</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">uploadOption</span><span class="p">.</span><span class="na">map</span><span class="p">(</span><span class="n">Upload</span><span class="p">::</span><span class="n">getPath</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">orElseGet</span><span class="p">(()</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">log</span><span class="p">.</span><span class="na">warn</span><span class="p">(</span><span class="s">&#34;文件获取path不存在。path={}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">return</span><span class="w">  </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<h2 id="第二部配置">第二部配置</h2>
<p>在 Spring Boot 中添加一下配置，注意LocationValues 的路径，必须以 <code>/</code> 结尾，访问本地文件必须有 <code>file:</code> ，不然会访问不到，报404</p>]]></description></item><item><title>优雅开启和关闭Spring Cloud项目</title><link>https://blog.niubi.dev/posts/%E4%BC%98%E9%9B%85%E5%BC%80%E5%90%AF%E5%92%8C%E5%85%B3%E9%97%ADspringcloud%E9%A1%B9%E7%9B%AE/</link><pubDate>Sat, 18 Aug 2018 12:59:08 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/%E4%BC%98%E9%9B%85%E5%BC%80%E5%90%AF%E5%92%8C%E5%85%B3%E9%97%ADspringcloud%E9%A1%B9%E7%9B%AE/</guid><description><![CDATA[<h2 id="第一种方式使用脚本不推荐">第一种方式,使用脚本(不推荐)</h2>
<p>使用命令行开启和关闭，直接 kill 掉Spring boot 进程，这样会导致Spring Cloud 项目不会去 注册中心把自己销毁掉，明明项目已经关闭，但是注册中心还是显示在线，而且这样还会有一个弊端，如果需
要监听Spring Boot 项目的生命周期钩子，比如项目启动和关闭，也会监听不到。
<code>/home/dev/app.sh</code></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">APP_NAME</span><span class="o">=</span><span class="nv">$2</span>
</span></span><span class="line"><span class="cl"><span class="c1">#使用说明，用来提示输入参数</span>
</span></span><span class="line"><span class="cl">usage<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Usage: sh 执行脚本.sh [start|stop|restart|status]&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#检查程序是否在运行</span>
</span></span><span class="line"><span class="cl">is_exist<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  <span class="nv">count</span><span class="o">=</span><span class="sb">`</span>ps -ef <span class="p">|</span>grep java<span class="p">|</span>grep <span class="nv">$APP_NAME</span><span class="p">|</span>grep -v grep<span class="p">|</span>wc -l<span class="sb">`</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#如果不存在返回1，存在返回0     </span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> <span class="nv">$count</span> <span class="o">==</span> <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#启动方法</span>
</span></span><span class="line"><span class="cl">start<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  is_exist
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="s2">&#34;0&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">APP_NAME</span><span class="si">}</span><span class="s2"> is already running. pid=</span><span class="si">${</span><span class="nv">pid</span><span class="si">}</span><span class="s2"> .&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="nv">SHELL_FOLDER</span><span class="o">=</span><span class="k">$(</span><span class="nb">cd</span> <span class="s2">&#34;</span><span class="k">$(</span>dirname <span class="s2">&#34;</span><span class="nv">$0</span><span class="s2">&#34;</span><span class="k">)</span><span class="s2">&#34;</span><span class="p">;</span><span class="nb">pwd</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">JAR_PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$SHELL_FOLDER</span><span class="s2">/../applications/</span><span class="nv">$APP_NAME</span><span class="s2">.jar&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">CONF_PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$SHELL_FOLDER</span><span class="s2">/../conf/logback-spring.xml&#34;</span>
</span></span><span class="line"><span class="cl">    nohup java -jar <span class="nv">$JAR_PATH</span> --logging.config<span class="o">=</span><span class="nv">$CONF_PATH</span> --spring.profiles.active<span class="o">=</span><span class="nb">test</span> &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl">   <span class="c1"># java -jar $JAR_PATH --logging.config=$CONF_PATH</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#停止方法</span>
</span></span><span class="line"><span class="cl">stop<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  is_exist
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="s2">&#34;0&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nv">pid</span><span class="o">=</span><span class="sb">`</span>ps -ef <span class="p">|</span>grep java<span class="p">|</span>grep <span class="nv">$APP_NAME</span><span class="p">|</span>grep -v grep<span class="p">|</span>awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Stop </span><span class="nv">$APP_NAME</span><span class="s2">, pid </span><span class="nv">$pid</span><span class="s2">&#34;</span>    
</span></span><span class="line"><span class="cl">    <span class="nb">kill</span> -9 <span class="nv">$pid</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">APP_NAME</span><span class="si">}</span><span class="s2"> is not running&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>  
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#输出运行状态</span>
</span></span><span class="line"><span class="cl">status<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  is_exist
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="s2">&#34;0&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">APP_NAME</span><span class="si">}</span><span class="s2"> is running. Pid is </span><span class="si">${</span><span class="nv">pid</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">APP_NAME</span><span class="si">}</span><span class="s2"> is NOT running.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#重启</span>
</span></span><span class="line"><span class="cl">restart<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  stop
</span></span><span class="line"><span class="cl">  start
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#根据输入参数，选择执行对应方法，不输入则执行使用说明</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> in
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;start&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    start
</span></span><span class="line"><span class="cl">    <span class="p">;;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;stop&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    stop
</span></span><span class="line"><span class="cl">    <span class="p">;;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;status&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    status
</span></span><span class="line"><span class="cl">    <span class="p">;;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;restart&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    restart
</span></span><span class="line"><span class="cl">    <span class="p">;;</span>
</span></span><span class="line"><span class="cl">  *<span class="o">)</span>
</span></span><span class="line"><span class="cl">    usage
</span></span><span class="line"><span class="cl">    <span class="p">;;</span>
</span></span><span class="line"><span class="cl"><span class="k">esac</span></span></span></code></pre></div></div>
<h3 id="使用">使用</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>* 开启
```bash
./app start myapp.jar</code></pre></div>
<ul>
<li>关闭</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./app stop myapp.jar</span></span></code></pre></div></div>
<ul>
<li>重启</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./app.sh restart myapp.jar </span></span></code></pre></div></div>
<h2 id="第二种方式打包可执行jar推荐">第二种方式,打包可执行jar(推荐)</h2>
<p>打包可执行的jar可以支持 systemctl 启动，也可以支持脚本启动，并且执行关闭后会冲注册中心销毁掉服务，并且会在启动和关闭会调用Spring Boot 的生命周期事件。</p>]]></description></item><item><title>expect 的用法</title><link>https://blog.niubi.dev/posts/expect%E7%9A%84%E7%94%A8%E6%B3%95/</link><pubDate>Fri, 17 Aug 2018 11:52:44 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/expect%E7%9A%84%E7%94%A8%E6%B3%95/</guid><description><![CDATA[<h3 id="usrbinexpect">!/usr/bin/expect</h3>
<p>    告诉操作系统脚本里的代码使用那一个<code>shell</code>来执行。</p>
<blockquote>
<p>注意：这段代码必须在第一行。</p></blockquote>
<h3 id="set-timeout">set timeout</h3>
<p>设置超时时间，计时单位是：秒 ，<code>timeout -1</code> 为永不超时。</p>
<h3 id="spawn">spawn</h3>
<p><code>spawn</code>是进入<code>expect</code>环境后才可以执行的<code>expect</code>内部命令，如果没有装<code>expect</code>或者直接在默认的SHELL下执行是找不到<code>spawn</code>命令的。所以不要用 <code>which spawn</code> 之类的命令去找<code>spawn</code>命令。</p>
<blockquote>
<p>它主要的功能是给ssh运行进程加个壳，用来传递交互指令。</p></blockquote>
<h3 id="expect-str">expect &ldquo;str&rdquo;</h3>
<p>这个命令的意思是判断上次输出结果里是否包含“str”的字符串，如果有则立即返回，否则就等待一段时间后返回，这里等待时长就是 <code>set timeout </code></p>
<h3 id="send-">send &quot;&quot;</h3>
<p>这里就是执行交互动作，</p>
<blockquote>
<p>命令字符串结尾别忘记加上“\r”，如果出现异常等待的状态可以核查一下。</p></blockquote>
<h3 id="interact">interact</h3>
<p>执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了。如果没有这一句登录完成后会退出，而不是留在远程终端上。如果你只是登录过去执行</p>
<h3 id="argv-参数数组">$argv 参数数组</h3>
<p>expect脚本可以接受从bash传递过来的参数.可以使用[lindex $argv n]获得，n从0开始，分别表示第一个,第二个,第三个&hellip;.参数</p>
<h2 id="示例">示例</h2>
<h3 id="expect-调用-ssh-密码登陆">expect 调用 ssh 密码登陆</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/expect
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> timeout <span class="m">5</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> password <span class="s2">&#34;1234&#34;</span>
</span></span><span class="line"><span class="cl">spawn ssh root@127.1.1
</span></span><span class="line"><span class="cl">expect <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;yes/no&#34;</span> <span class="o">{</span> send <span class="s2">&#34;yes\r&#34;</span><span class="p">;</span> exp_continue <span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;Password:&#34;</span> <span class="o">{</span> send <span class="s2">&#34;</span><span class="nv">$password</span><span class="s2">\r&#34;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">interact</span></span></code></pre></div></div>]]></description></item><item><title>Linux 各个目录的说明</title><link>https://blog.niubi.dev/posts/linux%E5%90%84%E4%B8%AA%E7%9B%AE%E5%BD%95%E7%9A%84%E8%AF%B4%E6%98%8E/</link><pubDate>Fri, 17 Aug 2018 11:52:00 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/linux%E5%90%84%E4%B8%AA%E7%9B%AE%E5%BD%95%E7%9A%84%E8%AF%B4%E6%98%8E/</guid><description><![CDATA[<h2 id="根文件系统">根文件系统</h2>
<h3 id="bin">/bin</h3>
<p>    这一目录中存放了供所有用户使用的完成基本维护任务的命令。其中bin是binary的缩写，表示二进制文件，通常为可执行文件。
    一些常用的系统命令，如<code>cp</code>、<code>ls</code>等保存在该目录中。</p>
<h3 id="boot">/boot</h3>
<p>    这里存放的是启动Linux时使用的一些核心文件。如操作系统内核、引导程序<em>Grub</em>等。</p>
<h3 id="dev">/dev</h3>
<p>    在此目录中包含所有的系统设备文件。从此目录可以访问各种系统设备。如CD-ROM，磁盘驱动器，调制解调器和内存等。
    在该目录中还包含有各种实用功能，如用于创建设备文件的MAKEDEV。</p>
<h3 id="etc">/etc</h3>
<p>    该目录中包含系统和应用软件的配置文件。</p>
<h3 id="etcpasswd">/etc/passwd</h3>
<p>    该目录中包含了系统中的用户描述信息，每行记录一个用户的信息。</p>
<h3 id="home">/home</h3>
<p>    存储普通用户的个人文件。每个用户的主目录均在/home下以自己的用户名命名。</p>
<h3 id="lib">/lib</h3>
<p>    这个目录里存放着系统最基本的共享链接库和内核模块。共享链接库在功能上类似于Windows里的.dll文件。</p>
<h3 id="lib64">/lib64</h3>
<p>    <strong>64位系统</strong>有这个文件夹，64位程序的库。</p>
<h3 id="lostfound">/lost+found</h3>
<p>    这并不是Linux目录结构的组成部分，而是ext3文件系统用于保存丢失文件的地方。
    不恰当的关机操作和磁盘错误均会导致文件丢失，这意味着这些被标注为“在使用”，但却并未列于磁盘上的数据结构上。
    正常情况下，引导进程会运行fsck程序，该程序能发现这些文件。除了“/”分区上的这个目录外，在每个分区上均有一个lost+found目录。</p>
<h3 id="media">/media</h3>
<p>    可移动设备的挂载点，当前的操作系统通常会把U盘等设备自动挂载到该文件夹下。</p>
<h3 id="mnt">/mnt</h3>
<p>    临时用于挂载文件系统的地方。一般情况下这个目录是空的，而在我们将要挂载分区时在这个目录下建立目录，再将我们将要访问的设备挂载在这个目录上，这样我们就可访问文件了。（注意在GNOME中，只有挂载到/media的文件夹才会显示在“计算机”中，挂载到/mnt不会做为特殊设备显示，详见自动挂载分区）</p>
<h3 id="opt">/opt</h3>
<p>    多数第三方软件默认安装到此位置，如Adobe Reader、google-earth等。并不是每个系统都会创建这个目录。</p>
<h3 id="proc">/proc</h3>
<p>    它是存在于内存中的虚拟文件系统。里面保存了内核和进程的状态信息。多为文本文件，可以直接查看。如/proc/cpuinfo保存了有关CPU的信息。</p>
<h3 id="root">/root</h3>
<p>    这是根用户的主目录。与保留给个人用户的/home下的目录很相似，该目录中还包含仅与根用户有关的条目。</p>
<h3 id="sbin">/sbin</h3>
<p>    供超级用户使用的可执行文件，里面多是系统管理命令，如<code>fsck</code>, <code>reboot</code>, <code>shutdown</code>, <code>ifconfig</code>等。</p>
<h3 id="tmp">/tmp</h3>
<p>    该目录用以保存临时文件。该目录具有Sticky特殊权限，所有用户都可以在这个目录中创建、编辑文件。但只有文件拥有者才能删除文件。为了加快临时文件的访问速度，有的实现把/tmp放在内存中。</p>
<h3 id="usr">/usr</h3>
<p>    静态的用户级应用程序等，见下。</p>
<h3 id="var">/var</h3>
<p>    动态的程序数据等，见下文。</p>
<h2 id="usr目录结构">/usr目录结构</h2>
<hr>
<p>    /usr通常是一个庞大的文件夹，其下的目录结构与根目录相似，但根目录中的文件多是系统级的文件，而/usr中是用户级的文件，一般与具体的系统无关。
    应注意，程序的配置文件、动态的数据文件等都不会存放到/usr，所以除了安装、卸载软件外，一般无需修改/usr中的内容。说在系统正常运行时，/usr甚至可以被只读挂载。由于这一特性，/usr常被划分在单独的分区，甚至有时多台计算机可以共享一个/usr。</p>
<blockquote>
<p>提示：
    usr最早是user的缩写，/usr的作用与现在的/home相同。而目前其通常被认为是 User System Resources 的缩写，其中通常是用户级的软件等，与存放系统级文件的根目录形成对比。</p></blockquote>
<h3 id="usrbin">/usr/bin</h3>
<p>    多数日常应用程序存放的位置。如果/usr被放在单独的分区中，Linux的单用户模式不能访问/usr/bin，所以对系统至关重要的程序不应放在此文件夹中。</p>
<h3 id="usrinclude">/usr/include</h3>
<p>    存放C/C++头文件的目录</p>
<h3 id="usrlib">/usr/lib</h3>
<p>    系统的库文件</p>
<h3 id="usrlocal">/usr/local</h3>
<p>    新装的系统中这个文件夹是空的，可以用于存放个人安装的软件。安装了本地软件的/usr/local里的目录结构与/usr相似</p>
<h3 id="usrsbin">/usr/sbin</h3>
<p>    在单用户模式中不用的系统管理程序，如apache2等。</p>
<h3 id="usrshare">/usr/share</h3>
<p>    与架构无关的数据。多数软件安装在此。</p>
<h3 id="usrx11r6">/usr/X11R6</h3>
<p>    该目录用于保存运行X-Window所需的所有文件。该目录中还包含用于运行GUI要的配置文件和二进制文件。
###/usr/src
    源代码</p>]]></description></item><item><title>Ubuntu16.04.5 安装 Docker</title><link>https://blog.niubi.dev/posts/ubuntu16.04.5%E5%AE%89%E8%A3%85docker/</link><pubDate>Fri, 17 Aug 2018 09:42:29 +0800</pubDate><author>xxxx</author><guid>https://blog.niubi.dev/posts/ubuntu16.04.5%E5%AE%89%E8%A3%85docker/</guid><description><![CDATA[<h2 id="使用-apt-get-安装">使用 apt-get 安装</h2>
<h3 id="卸载掉旧版本">卸载掉旧版本</h3>
<p>命令:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt remove docker docker-engine docker.io</span></span></code></pre></div></div>
<h3 id="安装">安装</h3>
<ol>
<li>更新软件包</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt update</span></span></code></pre></div></div>
<ol>
<li>添加使用 HTTPS 传输的软件包以及 CA 证书</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-transport-https <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    ca-certificates <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    curl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    software-properties-common</span></span></code></pre></div></div>
<ol start="2">
<li>添加Docker的官方GPG密钥</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="p">|</span> sudo apt-key add -</span></span></code></pre></div></div>
<p>验证秘钥</p>]]></description></item></channel></rss>